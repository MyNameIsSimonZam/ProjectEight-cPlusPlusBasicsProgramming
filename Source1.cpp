#include <iostream>

/*Задача 1. Ку!
Общеизвестно, что на планете Плюк можно купить гравицапу за пол-КЦ или, что то же самое, 2 200 чатлов.
Причем чатлы неделимы и всегда являются целым числом. Напишите простую программу-конвертер валют.
В программу вводится количество чатлов, а она сообщает, сколько это КЦ и сколько гравицап можно купить на эту сумму. Обеспечьте контроль ввода.
*/

void task11() {
	int chatl;

	std::cout << "Enter the chtle count: ";
	std::cin >> chatl;

	float halfKc = chatl / 2200;
	int gravitsap = (int)halfKc;

	std::cout << "This are " << halfKc / 2 << " kc and we can buy " << gravitsap << " gravitsaps\n";
}

/*Задача 2. Компьютерное зрение
Вы участвуете в разработке искусственного интеллекта, который играет в шахматы на доске размером 0,8 х 0,8 метра.
Робот смотрит камерой на доску и видит расположение фигур в вещественных числах с высокой точностью.
Напишите программу: после ввода вещественных координат шахматной фигуры программа должна определить, в какой клетке доски находится эта фигура.
Каждая клетка доски имеет размер 10х10 сантиметров и целочисленные координаты, состоящие из двух чисел.
Например, левая верхняя клетка имеет целые координаты (0, 0), справа от неё клетка (1, 0), а снизу (0, 1). Обеспечьте контроль ввода.
Пример
Ввод:
Введите местоположение фигуры:
0.731;
0.149.
Вывод:
Фигура находится в клетке (7, 1).
*/

void task12() {
	float x, y;

	std::cout << "Enter the chtle count (from 0 till 0.8): ";
	std::cin >> x >> y;

	if (x >= 0.8 || x <= 0 || y >= 0.8 || y <= 0) std::cout << "Error. You entered the incorrect numbers\n";
	else {
		x *= 10; y *= 10;
		std::cout << "The coordinates of figure are: (" << (int)x << ", " << (int)y << ")\n";
	}
}

/*Задача 3. Метеостанция
Для удобства работы сотрудников международной метеостанции каждый день нужно распечатывать различные
таблицы соответствия градусов по шкалам Цельсия и Фаренгейта. Напишите программу,
которая принимает на вход три целых числа в градусах Цельсия: нижняя граница температуры,
верхняя граница температуры и шаг. Программа выводит на экран таблицу соответствия
градусов Цельсия градусам Фаренгейта от нижней до верхней границы с указанным шагом.
Обеспечьте контроль ввода. Верхняя граница должна печататься, даже если последний шаг «перепрыгнул» её.
Известно, что 0 °С соответствует 32 °F, а каждый градус Цельсия эквивалентен 1,8 градусам Фаренгейта.
Пример
Ввод:
Нижняя граница: 0.
Верхняя граница: 40.
Шаг: 20.
Вывод:
C F
0 32
20 68
40 104
*/

void task13() {
	int min, max, step;

	std::cout << "Enter the low board, hight board than step for the table: ";
	std::cin >> min >> max >> step;

	std::cout << "\n";
	std::cout << "C\t" << "F\t\n";

	for (int i = 0; i < max + step; i += step) {
		float far = min * 1.8f + 32.0f;

		std::cout << min << "\t" << far << "\n";

		min += step;
	}
}

/*Задача 4. Аккуратность
Робот из задачи «Компьютерное зрение» верно определяет клетку, на которой стоят фигуры.
Но соперник-человек может поставить фигуру не по центру клетки, а со смещением.
Если во время игры такое смещение станет велико, робот не поймёт, в какой клетке стоит фигура.
Чтобы избежать этого, робот должен поправлять фигуры на доске, выставляя их по центру клетки.
Модифицируйте программу «Компьютерное зрение», чтобы она выдавала не только номера клетки с фигурой,
но и две вещественные поправки: показывала, как передвинуть фигуру по горизонтали и вертикали,
чтобы она встала по центру своей клетки. Обеспечьте контроль ввода.
Пример
Ввод:
Введите местоположение фигуры:
0.731;
0.167.
Вывод:
Фигура находится в клетке (7, 1).
Поправьте положение фигуры на (0.019, -0.017).
*/

void task14() {
	float x, y;

	std::cout << "Enter the chtle count (from 0 till 0.8): ";
	std::cin >> x >> y;

	if (x >= 0.8 || x <= 0 || y >= 0.8 || y <= 0) std::cout << "Error. You entered the incorrect numbers\n";
	else {
		x *= 10; y *= 10;
		float correctX = (0.5 - (x - (int)x)) / 10;
		float correctY = (0.5 - (y - (int)y)) / 10;
		std::cout << "The coordinates of figure are: (" << (int)x << ", " << (int)y << ")\n";
		std::cout << "Correct figure: (" << correctX << ", " << correctY << ")\n";
	}
}
